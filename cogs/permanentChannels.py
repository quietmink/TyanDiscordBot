import disnake
from disnake.ext import commands

class Dropdown(disnake.ui.StringSelect):
    def __init__(self):

        options = [
            disnake.SelectOption(
                label = "–°–æ–∑–¥–∞—Ç—å", emoji = "‚ö∞Ô∏è", value = "create"
            ),
            disnake.SelectOption(
                label = "–û—Ç–∫—Ä—ã—Ç—å", emoji = "üì≠", value = "open"
            ),
            disnake.SelectOption(
                label = "–ó–∞–∫—Ä—ã—Ç—å", emoji = "üì™", value = "close"
            ),
        ]

        super().__init__(
            placeholder = "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            min_values = 1,
            max_values = 1,
            options = options,
        )

    async def callback(self, inter: disnake.MessageInteraction):
        if self.values[0] == "create":
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            permquery = inter.bot.db_cursor.execute(f"SELECT member_id, channel_id FROM permanent_channels_{inter.guild.id} WHERE member_id = {inter.author.id}").fetchone()
            if permquery == None or disnake.utils.get(inter.guild.channels, id = permquery[1]) == None:
                emb = disnake.Embed(description = "üìõ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫—É –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–Ω–∞—Ç–µ.")
                emb.set_footer(text = "–î–∞–Ω–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è.")
                open_button = disnake.ui.Button(style = disnake.ButtonStyle.green, label = "–û—Ç–∫—Ä—ã—Ç–∞—è", custom_id = "open")
                close_button = disnake.ui.Button(style = disnake.ButtonStyle.red, label = "–ó–∞–∫—Ä—ã—Ç–∞—è", custom_id = "close")
                await inter.response.edit_message(embed = emb,  components = [open_button, close_button])

                try:
                    interaction = await inter.bot.wait_for("button_click", timeout = 20)
                    
                    # –ó–∞–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–∞
                    permcategory = disnake.utils.get(inter.guild.categories, id = 1173949858634272819)
                    if interaction.component.custom_id == "open": access = True
                    else: access = False
                    overwrites = {
                        disnake.utils.get(inter.guild.roles, id = 1167532972212240516): disnake.PermissionOverwrite(connect = access),
                        inter.author: disnake.PermissionOverwrite(connect = True, manage_channels = True)
                    }

                    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
                    permchannel = await inter.guild.create_voice_channel(name = f"{inter.author.display_name}\'s channel", category = permcategory, overwrites = overwrites)
                    
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤ –ë–î
                    inter.bot.db_cursor.execute(f"INSERT OR REPLACE INTO permanent_channels_{inter.guild.id} VALUES ({inter.author.id}, {permchannel.id})")
                    inter.bot.db_connection.commit()
                    
                    await inter.edit_original_response(embed = disnake.Embed(description = f"‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞."), components = None)
                except Exception as e:
                    await inter.edit_original_response(embed = disnake.Embed(description = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã."), components = None)
                    print(e)
            else:
                await inter.response.edit_message(embed = disnake.Embed(description = f"‚ùå –ü—Ä–∏–≤–∞—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."), components = None)
        elif self.values[0] == "open":
            pass
        elif self.values[0] == "close":
            pass
        await inter.delete_original_response(delay = 3)

class PermanentChannels(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(description = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏.")
    async def menu(self, inter):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–æ–ª–∏ –±—É—Å—Ç–µ—Ä–∞
        premium_role = inter.guild.premium_subscriber_role
        if not premium_role in inter.author.roles: raise commands.MissingRole(premium_role)

        view = disnake.ui.View()
        view.add_item(Dropdown())
        await inter.send(view = view, ephemeral = True)         
            
    @commands.Cog.listener()
    async def on_member_update(self, before, after):
        removed_roles = set(before.roles) - set(after.roles)
        if before.guild.get_role(798228559675916350) in removed_roles:
            permquery = self.bot.db_cursor.execute(f"SELECT channel_id FROM permanent_channels_{before.guild.id} WHERE member_id = {before.id}").fetchone()
            if permquery != None:
                try:
                    channel = before.guild.get_channel(permquery[0])
                    if channel: await channel.delete()
                    
                    self.bot.db_cursor.execute(f"DELETE FROM permanent_channels_{before.guild.id} WHERE channel_id = {permquery[0]}")
                    self.bot.db_connection.commit()
                except Exception as e:
                    print(e)                                
    
    @commands.Cog.listener()
    async def on_member_remove(self, member):
        permquery = self.bot.db_cursor.execute(f"SELECT channel_id FROM permanent_channels_{member.guild.id} WHERE member_id = {member.id}").fetchone()
        if  permquery != None:
            channel = member.guild.get_channel(permquery[0])
            if channel: await channel.delete()
            self.bot.db_cursor.execute(f"DELETE FROM permanent_channels_{member.guild.id} WHERE member_id = {member.id}")
            self.bot.db_connection.commit()
            
def setup(bot):
    bot.add_cog(PermanentChannels(bot))